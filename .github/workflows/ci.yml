---
name: 'Integration Tests'
on:
  pull_request:
    branches: ["main"]
permissions:
  contents: read
jobs:
  tests:
    name: 'Perform Tests'
    runs-on: [acme]

    # Use the Bash shell regardless whether the GitHub Actions runner
    # is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout This Repository
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the
      # Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        id: setup-terraform

      # Initialize a new or existing Terraform working directory by
      # creating initial files, loading any remote state, downloading
      # modules, etc.
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

      # Checks that all Terraform configuration files adhere to a
      # canonical format if this fails, a quick fix is to run:
      # terraform fmt -diff
      # terraform fmt
      # manually inspect the changes, then commit them.
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
          TF_VAR_PM_API_URL: ${{ secrets.PM_API_URL_DEV }}
          TF_VAR_PM_API_TOKEN_ID: ${{ secrets.PM_API_TOKEN_ID_DEV }}
          TF_VAR_PM_API_TOKEN_SECRET: ${{ secrets.PM_API_TOKEN_SECRET_DEV }}
        run: terraform plan -input=false
